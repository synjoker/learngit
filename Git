#Git基本操作
##创建版本库
>
$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit

第二步，通过git init命令把这个目录变成Git可以管理的仓库：

$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/
千万不要使用Windows自带的记事本编辑任何文本文件。原因是Microsoft开发记事本的团队使用了一个非常弱智的行为来保存UTF-8编码的文件，他们自作聪明地在每个文件开头添加了0xefbbbf（十六进制）的字符，你会遇到很多不可思议的问题，比如，网页第一行可能会显示一个“?”，明明正确的程序一编译就报语法错误，等等，都是由记事本的弱智行为带来的。建议你下载Notepad++代替记事本，不但功能强大，而且免费！记得把Notepad++的默认编码设置为UTF-8 without BOM即可：

提交修改
$ git add readme.txt
$ git commit -m "wrote a readme file"

$ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."

git status
git diff
提交后，用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
git log --pretty=oneline
git reset --hard HEAD^
用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
cat readme.txt #查看文本内容
办法其实还是有的，只要上面的命令行窗口还没有被关掉，你就可以顺着往上找啊找啊，找到那个append GPL的commit id是1094adb...，于是就可以指定回到未来的某个版本：
$ git reset --hard 1094a

git reflog用来记录你的每一次命令
39e3ea0 HEAD@{0}: reset: moving to 39e3e
d23deec HEAD@{1}: reset: moving to HEAD^
787e108 HEAD@{2}: reset: moving to HEAD^
39e3ea0 HEAD@{3}: commit: GPL
787e108 HEAD@{4}: commit: add distributed
d23deec HEAD@{5}: commit (initial): try

git checkout -- file可以丢弃工作区的修改
命令git reset HEAD <file>可以把暂存区的修改撤销掉（unstage），重新放回工作区
从版本库中删除该文件，那就用命令git rm删掉，并且git commit
$ git checkout -- test.txt
git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。

远程仓库
$ ssh-keygen -t rsa -C "youremail@example.com"

git remote add origin git@github.com:synjoker/learngit.git
$ git push -u origin master
$ git push origin master


